export async function register(req, res) {
    try {
        const { username, password, profile, email } = req.body;
        // Check existing user
        const existingUsername = new Promise((resolve, reject) => {
            UserModel.findOne({ username }, function(err, user) {
                if (err) reject(new Error(err));
                if (user) reject({ error: "Please use a unique username" });

                resolve();
            });
        });

        // Check for existing email
        const existingEmail = new Promise((resolve, reject) => {
            UserModel.findOne({ email }, function(err, user) {
                if (err) reject(new Error(err));
                if (user) reject({ error: "Please use a unique email" });

                resolve();
            });
        });

        Promise.all([existingUsername, existingEmail])
            .then(() => {
                if (password) {
                    bcrypt.hash(password, 10)
                        .then(hashedPassword => {
                            const user = new UserModel({
                                username,
                                password: hashedPassword,
                                profile: profile || "",
                                email,
                            });

                            // Return save result as a response
                            user.save()
                                .then(result => {
                                    res.status(201).send({ msg: "User Registration Successful" });
                                    result();
                                })
                                .catch(error => {
                                    res.status(500).send({ error : "Error saving user" });
                                });
                        })
                        .catch(error => {
                            res.status(500).send({ error: "Unable to hash password" });
                        });
                }
            })
            .catch(error => {
                res.status(500).send({ error: error.message });
            });
    } catch (error) {
        res.status(500).send({error : error.message});
    }
}















export async function register(req, res){
    try{
        const { username, password, profile, email } = req.body;
        //check existing user
        const existingUsername = new Promise((resolve, reject) => {
            UserModel.findOne({username}, function(err, user){
                if(err) reject(new Error(err))
                if(user) reject({error: "Please use unique username"})

                resolve();
            })
        });

        //check for existing email
        const existingEmail = new Promise((resolve, reject) => {
            UserModel.findOne({email}, function(err, user){
                if(err) reject(new Error(err))
                if(email) reject({error: "Please use unique Email"})

                resolve();
            })
        });

        Promise.all([existingUsername, existingEmail])
            .then(() => {
                if(password){
                    bcrypt.hash(password, 10)
                        .then( hashedPassword => {

                            const user = new UserModel({
                                username,
                                password: hashedPassword,
                                profile: profile || '',
                                email
                            });

                            //return save result as a response
                            user.save()
                                .then(result => res.status(201).send({msg: "User Registeration Successful"}))
                                .catch(error => res.status(500).send({error}))

                                result()

                        }).catch(error => {
                            return res.status(500).send({
                                error: "Enable to hashed password"
                            })
                        })
                }
            }).catch(error => {
                return res.status(500).send({error})
            })

    }catch (error){
        return res.status(500).send(error)
    }
}

